// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TemplateAPIModel;

namespace TemplateAPI.Migrations
{
    [DbContext(typeof(TemplateContext))]
    [Migration("20211217010031_newVersion")]
    partial class newVersion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TemplateAPIModel.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Building");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Street");

                    b.Property<int>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("TemplateAPIModel.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("TemplateAPIModel.HealthCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Insurance");

                    b.HasKey("Id");

                    b.ToTable("HealthCard");
                });

            modelBuilder.Entity("TemplateAPIModel.HealthCardIllness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HealthCardId");

                    b.Property<int>("IllnessId");

                    b.HasKey("Id");

                    b.HasIndex("HealthCardId");

                    b.HasIndex("IllnessId");

                    b.ToTable("HealthCardIllnesses");
                });

            modelBuilder.Entity("TemplateAPIModel.Illness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Illness");
                });

            modelBuilder.Entity("TemplateAPIModel.IllnessSymptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IllnessId");

                    b.Property<int>("SymptomId");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.HasIndex("SymptomId");

                    b.ToTable("IllnessSymptoms");
                });

            modelBuilder.Entity("TemplateAPIModel.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Symptom");
                });

            modelBuilder.Entity("TemplateAPIModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<int?>("DoctorId");

                    b.Property<string>("FirstName");

                    b.Property<int?>("HealthCardId");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Number");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HealthCardId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TemplateAPIModel.HealthCardIllness", b =>
                {
                    b.HasOne("TemplateAPIModel.HealthCard", "HealthCard")
                        .WithMany("HealthCardIllnesses")
                        .HasForeignKey("HealthCardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TemplateAPIModel.Illness", "Illness")
                        .WithMany("HealthCardIllnesses")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TemplateAPIModel.IllnessSymptom", b =>
                {
                    b.HasOne("TemplateAPIModel.Illness", "Illness")
                        .WithMany("IllnessSymptoms")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TemplateAPIModel.Symptom", "Symptom")
                        .WithMany("IllnessSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TemplateAPIModel.User", b =>
                {
                    b.HasOne("TemplateAPIModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("TemplateAPIModel.Doctor")
                        .WithMany("Pacients")
                        .HasForeignKey("DoctorId");

                    b.HasOne("TemplateAPIModel.HealthCard", "HealthCard")
                        .WithMany()
                        .HasForeignKey("HealthCardId");
                });
#pragma warning restore 612, 618
        }
    }
}
